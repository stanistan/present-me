#!/bin/bash
set -euo pipefail

# We ensure that we're running in the project directory
# assuming that this script is in a single level sudirectory
# out from the PROJECT base.
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
PROJECT_DIR="$SCRIPT_DIR/../"
cd "$PROJECT_DIR"

usage() {
  rg '^\s+([^)]+)\)$' "${BASH_SOURCE[0]}" -r '$1' -N | grep -v '\*'
}

case "$1" in
  bootstrap)
    # 1. Make sure everything is installed!
    hermit install

    # 2. We have a specific version of YARN we are running
    #    that gets installed globally, so we pin and install it.
    YARN_VERSION=1.22.19
    npm install -g "yarn@$YARN_VERSION"

    # 3. Install node package dependencies to get started!.
    pushd frontend
    yarn install
    popd

    # 4. Install go / server dependencies
    pushd server
    go mod download
    popd
    ;;
  dev)
    trap 'trap " " SIGTERM; kill 0; wait' SIGINT SIGTERM
    prmectl start-frontend &
    prmectl start-server &
    wait
    ;;
  local-prod)
    cd frontend
    yarn generate
    cd ../server
    (rm static || true) && ln -s ../frontend/.output/public static
    exec env $(cat .env | xargs) \
      go run ./cmd/server-nuxt
    ;;
  start-frontend)
    cd frontend
    exec yarn run dev
    ;;
  start-server)
    cd server
    # shellcheck disable=SC2046,SC2002
    exec env $(cat .env | xargs) \
      go run github.com/cespare/reflex -d none -s -- \
      go run ./cmd/server-nuxt --serve=proxy
    ;;
  help)
    usage
    ;;
  *)
    echo "invalid option: $1"
    exit 1
    ;;
esac
